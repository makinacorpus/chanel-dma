<plominodatabase id="planningdb">
  <design>
    <element id="portletNavigation" title="Navigation" type="PlominoForm">
      <id type="Products.Archetypes.Field.StringField">portletNavigation</id>
      <onCreateDocument type="Products.Archetypes.Field.TextField"><![CDATA[]]></onCreateDocument>
      <onOpenDocument type="Products.Archetypes.Field.TextField"><![CDATA[]]></onOpenDocument>
      <beforeSaveDocument type="Products.Archetypes.Field.TextField"><![CDATA[]]></beforeSaveDocument>
      <onSaveDocument type="Products.Archetypes.Field.TextField"><![CDATA[]]></onSaveDocument>
      <onDeleteDocument type="Products.Archetypes.Field.TextField"><![CDATA[]]></onDeleteDocument>
      <onSearch type="Products.Archetypes.Field.TextField"><![CDATA[]]></onSearch>
      <beforeCreateDocument type="Products.Archetypes.Field.TextField"><![CDATA[]]></beforeCreateDocument>
      <FormLayout type="Products.Archetypes.Field.TextField"><![CDATA[
<p><span class="plominoFieldClass">portlet_html</span></p>
<p><span class="plominoHidewhenClass">start:allowed</span> <span class="plominoSubformClass">backoffice</span> <span class="plominoHidewhenClass">end:allowed</span></p>
<p><span class="plominoFieldClass">portlet_js</span></p>
]]></FormLayout>
      <FormMethod type="Products.Archetypes.Field.TextField"><![CDATA[Auto]]></FormMethod>
      <DocumentTitle type="Products.Archetypes.Field.TextField"><![CDATA[]]></DocumentTitle>
      <DynamicDocumentTitle type="Products.Archetypes.Field.BooleanField">False</DynamicDocumentTitle>
      <StoreDynamicDocumentTitle type="Products.Archetypes.Field.BooleanField">False</StoreDynamicDocumentTitle>
      <DocumentId type="Products.Archetypes.Field.TextField"><![CDATA[]]></DocumentId>
      <ActionBarPosition type="Products.Archetypes.Field.StringField">TOP</ActionBarPosition>
      <HideDefaultActions type="Products.Archetypes.Field.BooleanField">False</HideDefaultActions>
      <HideInMenu type="Products.Archetypes.Field.BooleanField">False</HideInMenu>
      <isSearchForm type="Products.Archetypes.Field.BooleanField">False</isSearchForm>
      <isPage type="Products.Archetypes.Field.BooleanField">True</isPage>
      <SearchView type="Products.Archetypes.Field.StringField"/>
      <SearchFormula type="Products.Archetypes.Field.TextField"><![CDATA[]]></SearchFormula>
      <Position type="Products.Archetypes.Field.IntegerField"/>
      <ResourcesJS type="Products.Archetypes.Field.TextField"><![CDATA[]]></ResourcesJS>
      <ResourcesCSS type="Products.Archetypes.Field.TextField"><![CDATA[]]></ResourcesCSS>
      <excludeFromNav type="Products.Archetypes.Field.BooleanField">False</excludeFromNav>
      <elements>
        <element id="portlet_html" title="portlet_html" type="PlominoField">
          <id type="Products.Archetypes.Field.StringField">portlet_html</id>
          <FieldType type="Products.Archetypes.Field.StringField">RICHTEXT</FieldType>
          <FieldMode type="Products.Archetypes.Field.StringField">DISPLAY</FieldMode>
          <Formula type="Products.Archetypes.Field.TextField"><![CDATA[db = plominoContext.getParentDatabase()
form = db.getForm("frmShopProgram")
request = context.REQUEST
doc = actual_context(context)
is_sp = ( doc and doc.getItem("doctype") == "shopprogram" )

current_shop_id =  is_sp and doc.getItem("shop_id") or request.get("shop_id")
current_shop = db.getDocument(current_shop_id)

current_program_id = is_sp and doc.getItem("program_id") or request.get("program_id")
current_program = db.getDocument(current_program_id)

current_market = current_shop and current_shop.getItem("shop_market") or None
current_month = current_program and current_program.getItem("program_month") or None


#Log("current_market %s" % current_market)
#Log("current_month %s" % current_month)
# config values
markets = [a.split("|") for a in db.callScriptMethod("scriptConfig", "getConfigValuesAsList", db, "markets")]
months = db.callScriptMethod("scriptConfig", "getConfigValuesAsDict", db, "months")

# months
current_date = Now()
previous_date = DateTime(((current_date.month()==1) and current_date.year()-1 or current_date.year()),( (current_date.month()==1) and 12 or current_date.month()-1), 1)
next_date = DateTime(current_date.year() + (current_date.month() / 12), ((current_date.month() % 12) + 1), 1)
dates = [ previous_date, current_date, next_date]

#programs
programs = [a.getObject() for a in db.getIndex().dbsearch({'doctype': 'program', 'program_is_published': True, 'program_month': {'query': [a.month() for a in dates], 'operator': 'OR'}})]

#user
is_manager = "[manager]" in context.getCurrentUserRoles()
current_user_id = context.getCurrentUserId()
current_user = context.getCurrentUser()
is_zope_user = "Manager" in current_user.getRoles()

programs_by_market= {}
market_ids = []
for program in programs:
    program_market = program.getItem("program_market")
    if program_market not in market_ids:
        market_ids.append(program_market)
    program_year = program.getItem("program_year")
    program_month = program.getItem("program_month")
    programs_by_market.setdefault(program_year, {}).setdefault(program_month,{})
    programs_by_market[program_year][program_month][program_market] = program

#shop programs
shop_programs = [a.getObject() for a in db.getIndex().dbsearch({'doctype': 'shopprogram', 
                        'program_id': {'query': [a.id for a in programs], 'operator': 'OR'},
                        })]
#shops
shops = [a.getObject() for a in db.getIndex().dbsearch({'doctype': 'shop', 'shop_is_published': True}, sortindex='shop_name')]
#, 'shop_market': {'query': market_ids, 'operator': 'OR'}})]

shops_by_market = {}
for shop in shops:
     shop_market = shop.getItem("shop_market")
     shops_by_market.setdefault(shop_market, [])
     shops_by_market[shop_market].append(shop)


shopprograms_by_shop = {}
for sp in shop_programs:
    shop_id = str(sp.getItem("shop_id"))
    shopprograms_by_shop.setdefault(shop_id, {})
    shopprograms_by_shop[shop_id][str(sp.getItem("program_id"))] = sp

def is_allowed_to_edit(shop_programme):
    return is_zope_user or is_manager or current_user_id in asList(shop_programme.getItem("Plomino_Authors", []))

def computeSection(date):
    month_id = date.month()
    month = months[str(month_id)]
    year = date.year()
    if current_month:
         class_css = (current_month == int(month_id)) and "current" or ""
    else:
         class_css = date is current_date and "current" or ""

#    Log(month_id)
#    Log(current_month)

    tmp_html = """<li class="main %s"><a><span>%s</span></a><ul class="market-list">""" % (class_css, month)
    month_programs = programs_by_market.setdefault(year,{}).get(month_id, {})
    
    if not (month_programs or class_css == "current"  or date is current_date):
        return ""
    
    for market_name, market_id in markets:
        program = month_programs.get(market_id)
        if program:
            shops = shops_by_market.get(market_id)
            class_css = program.id == current_program_id and "current" or ""
            tmp_html += """<li class="%s"><a href="#"><span>%s</span></a>""" % (class_css, market_name)

            if shops:
                tmp_html += """<ul class="shop-list">"""
                for shop in shops:
                    class_current_css = (class_css == "current" and current_shop_id == shop.id) and "current" or ""
                    if program.id in shopprograms_by_shop.get(shop.id,{}).keys():
                        sh_program = shopprograms_by_shop[shop.id][program.id]
                        if sh_program.getItem("planning_locked") == "true":
                            class_current_css = "submitted"
                        if is_allowed_to_edit(sh_program):
                            url = "%s/EditDocument" % sh_program.absolute_url()
                        elif class_current_css:
                            url = "%s" % sh_program.absolute_url()
                        else:        
                            tmp_html += """<li class="empty"><a><span>%s</span></a></li>""" % (shop.getItem("shop_name"))
                            continue
                    elif is_zope_user or is_manager or current_user_id == shop.getItem("shop_manager"):
                            url = "%s/createShopProgramAndRedirect/runAgent?program_id=%s&shop_id=%s" % (form.absolute_url(), program.id, shop.id)
                    else:
                        tmp_html += """<li class="empty"><a><span>%s</span></a></li>""" % (shop.getItem("shop_name"))
                        continue

                    tmp_html += """<li><a href="%s" class="%s"><span>%s</span></a></li>""" % (url, class_current_css, shop.getItem("shop_name"))
                tmp_html += """</ul>"""
            tmp_html += """</li>"""
        else:
            tmp_html += """<li class="empty"><a href="#"><span>%s</span></a></li>""" % market_name
    tmp_html += """</ul></li>"""
    return tmp_html

html = """<div id="portlet_navigation"> <ul>"""

for date in dates:
   html += computeSection(date)

html += """</ul></div>"""

return html]]></Formula>
          <FieldReadTemplate type="Products.Archetypes.Field.StringField"/>
          <FieldEditTemplate type="Products.Archetypes.Field.StringField"/>
          <Mandatory type="Products.Archetypes.Field.BooleanField">False</Mandatory>
          <ValidationFormula type="Products.Archetypes.Field.TextField"><![CDATA[]]></ValidationFormula>
          <ToBeIndexed type="Products.Archetypes.Field.BooleanField">False</ToBeIndexed>
          <IndexType type="Products.Archetypes.Field.StringField">DEFAULT</IndexType>
          <HTMLAttributesFormula type="Products.Archetypes.Field.TextField"><![CDATA[]]></HTMLAttributesFormula>
        </element>
        <element id="portlet_js" title="portlet_js" type="PlominoField">
          <id type="Products.Archetypes.Field.StringField">portlet_js</id>
          <FieldType type="Products.Archetypes.Field.StringField">RICHTEXT</FieldType>
          <FieldMode type="Products.Archetypes.Field.StringField">DISPLAY</FieldMode>
          <Formula type="Products.Archetypes.Field.TextField"><![CDATA[html="""
<script>
    $("#portlet_navigation ul li.current > ul").show()
</script>
"""
return html]]></Formula>
          <FieldReadTemplate type="Products.Archetypes.Field.StringField"/>
          <FieldEditTemplate type="Products.Archetypes.Field.StringField"/>
          <Mandatory type="Products.Archetypes.Field.BooleanField">False</Mandatory>
          <ValidationFormula type="Products.Archetypes.Field.TextField"><![CDATA[]]></ValidationFormula>
          <ToBeIndexed type="Products.Archetypes.Field.BooleanField">False</ToBeIndexed>
          <IndexType type="Products.Archetypes.Field.StringField">DEFAULT</IndexType>
          <HTMLAttributesFormula type="Products.Archetypes.Field.TextField"><![CDATA[]]></HTMLAttributesFormula>
        </element>
        <element id="allowed" title="allowed" type="PlominoHidewhen">
          <id type="Products.Archetypes.Field.StringField">allowed</id>
          <Formula type="Products.Archetypes.Field.TextField"><![CDATA[if hasattr(context, 'getCurrentUserRoles') and hasattr(context, 'getCurrentUser'):
     return not("[manager]" in context.getCurrentUserRoles() or "Manager" in context.getCurrentUser().getRoles())
    ]]></Formula>
          <isDynamicHidewhen type="Products.Archetypes.Field.BooleanField">False</isDynamicHidewhen>
        </element>
      </elements>
    </element>
  </design>
</plominodatabase>
